#!/bin/bash
#
# cwl-metrics
#   usage:
#     cwl-metrics [start|stop|list] <options>
#
set -e

#
# Variables
#
VERSION="20180726"
CWL_METRICS_DIR="${HOME}/.cwlmetrics"

CWL_LOG_GENERATOR_VERSION="0.1.14"
CWL_METRICS_CLIENT_VERSION="0.1.9"

#
# Load functions
#

## Version
version() {
  echo "cwl-metrics version ${VERSION}"
}

## Help
help() {
  cat <<-HELP

cwl-metrics version ${VERSION}
Usage: cwl-metrics [command] [options...]
Commands:
  start             Run CWL-metrics daemon and containers
  stop              Stop daemon and containers
  status            Show CWL-metrics system status
  fetch <json|tsv>  Fetch metrics data stored in Elasticsearch

HELP
}

## Install/Initialize CWL-metrics
check_cmd() {
  cmd=${1}
  printf "Checking ${cmd}..."
  if [[ -e $(which ${cmd}) ]]; then
    echo "OK."
  else
    echo -e "\nERROR: ${cmd} not found."
    echo "Failed to init CWL-metrics"
    exit 1
  fi
}

check_dependencies() {
  check_cmd "git"
  check_cmd "curl"
  check_cmd "perl"
  check_cmd "docker"
  check_cmd "docker-compose"
}

check_vm_max_map_count() {
  case "$(uname -s)" in
    Linux*)
      if [[ $(sysctl vm.max_map_count | awk '{ print $NF }') -lt 262144 ]]; then
        echo "vm.max_map_count is not enough for launching Elasticsearch"
        echo "Set it to 262144 by the following command"
        echo "  sysctl -w vm.max_map_count=262144"
        exit 1
      fi
      ;;
  esac
}

fetch_cwlmetrics_repo() {
  local url="https://github.com/inutano/cwl-metrics"
  echo "Installing cwlmetrics libraries at ${CWL_METRICS_DIR}..."
  git clone "${url}" "${CWL_METRICS_DIR}"
}

fetch_dmc_repo(){
  local url="https://github.com/inutano/docker-metrics-collector"
  local dmc_repo="${CWL_METRICS_DIR}/repos/dmc"
  echo "Installing docker metrics collector at ${dmc_repo}..."
  mkdir -p "${CWL_METRICS_DIR}/repos"
  git clone "${url}" "${dmc_repo}"
  cd "${dmc_repo}"
  git checkout -b production
  sed -i.bak -E 's:#(.*)#PERSIST_DATA:\1:' "docker-compose.yml"
}

generate_config(){
  echo "Generating config file at ${CWL_METRICS_DIR}/config ..."
  cat  > "${CWL_METRICS_DIR}/config" <<-EOS
ES_HOST=${ES_HOST}
ES_PORT=${ES_PORT}
DMC_DIR_PATH=${HOME}/.cwlmetrics/repos/dmc
EOS
}

pull_containers(){
  echo "Pulling containers..."
  docker pull "quay.io/inutano/cwl-log-generator:${CWL_LOG_GENERATOR_VERSION}"
  docker pull "quay.io/inutano/cwl-metrics-client:${CWL_METRICS_CLIENT_VERSION}"
}

init_cwl_metrics() {
  if [[ -e "${CWL_METRICS_DIR}" ]]; then
    help
    exit 0
  else
    echo "Initializing CWL-metrics..."
    check_dependencies
    check_vm_max_map_count
    fetch_cwlmetrics_repo
    fetch_dmc_repo
    generate_config
    pull_containers
    echo "CWL-metrics initialization complete. Starting system..."
  fi
}

## Show CWL-metrics status
cwl_metrics_status() {
  pid_file="/tmp/cwllog_pid"
  if [[ -e "${pid_file}" ]]; then
    echo "cwl-metrics is running."
    exit 0
  else
    echo "cwl-metrics is not running."
    exit 1
  fi
}

## Start CWL-metrics processes and containers
es_endpoint() {
  host=$(cat ${CWL_METRICS_DIR}/config | awk -F'=' '/^ES_HOST/ { print $2 }')
  port=$(cat ${CWL_METRICS_DIR}/config | awk -F'=' '/^ES_PORT/ { print $2 }')
  if [[ -z ${host} ]]; then host=localhost; fi
  if [[ -z ${port} ]]; then port=9200; fi
  echo "http://${host}:${port}"
}

check_es_index() {
  echo "Creating Elasticsearch index..."
  local ep="$(es_endpoint)"
  while [[ -z $(curl -s "${ep}/workflow" | grep workflow_log) ]]; do
    sleep 1
  done
  echo $(curl -s "${ep}/telegraf")
  echo $(curl -s "${ep}/workflow")
}

start_cwl_metrics() {
  echo "Starting CWL-metrics..."
  perl "${CWL_METRICS_DIR}/lib/daemon/init.pl" start
  # Check setup container down and index of ES is available
  check_es_index
  echo -e "\nCWL-metrics is running."
}

## Stop CWL-metrics processes and containers
stop_cwl_metrics() {
  echo "Stopping CWL-metrics..."
  perl "${CWL_METRICS_DIR}/lib/daemon/init.pl" stop
  echo "CWL-metrics is stopped."
}

## fetch data from Elasticsearch, format must be json or tsv
fetch_data() {
  local format="${1}"
  local option="-it --rm"

  if [[ ! -z "${ES_HOST}" ]]; then
    local option="${option} -e ES_HOST=${ES_HOST}"
  else
    local option="${option} --network=host"
  fi

  if [[ ! -z "${ES_PORT}" ]]; then
    local option="${option} -e ES_PORT=${ES_PORT}"
  fi

  docker run --rm ${option} \
    quay.io/inutano/cwl-metrics-client:${CWL_METRICS_CLIENT_VERSION} \
    ${format}
}

#
# Exec: init if no arguments specified, otherwise select command
#
if [[ $# -eq 0 ]]; then
  init_cwl_metrics
  start_cwl_metrics
else
  while [[ $# -gt 0 ]]; do
    key=${1}
    case ${key} in
      status)
        cwl_metrics_status
        ;;
      up | start)
        start_cwl_metrics
        ;;
      down | stop)
        stop_cwl_metrics
        ;;
      restart)
        stop_cwl_metrics
        start_cwl_metrics
        ;;
      fetch)
        fetch_data "${2}"
        shift
        ;;
      -v|--version)
        version
        exit 0
        ;;
      *)
        help
        exit 0
        ;;
    esac
    shift
  done
fi
